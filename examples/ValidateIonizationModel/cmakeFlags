#!/bin/bash
#
# Copyright 2013-2015 Axel Huebl, Rene Widera, Marco Garten
#
# This file is part of PIConGPU. 
# 
# PIConGPU is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version. 
# 
# PIConGPU is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
# GNU General Public License for more details. 
# 
# You should have received a copy of the GNU General Public License 
# along with PIConGPU.  
# If not, see <http://www.gnu.org/licenses/>. 
#

#
# generic compile options
#

################################################################################
# add presets here
#   - default: index 0
#   - start with zero index
#   - increase by 1, no gaps
#
# if you configure and possess an architecture >sm_20 then please
# add the flag "-a < architecture >" to $PICSRC/configure

#####
# Test cases for validation of the ionization model implementation
#
# --> see componentsConfig.param for more documentation on the test cases
###

#####
# Test case 0 : "Dry-run"
# ------------------------------------------------------------------------------
# ionization model: None
flags[0]="-DCUDA_ARCH=sm_20"
###

#####
# Test case 1 : "Homogenous, Static Field"
# ------------------------------------------------------------------------------
# ionization model: BSIHydrogenLikeHydrogenLike
flags[1]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=1;-DPARAM_IONIZATIONMODEL=BSIHydrogenLike"
# ionization model: ADK
flags[2]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=1;-DPARAM_IONIZATIONMODEL=ADK"
###

#####
# Test case 2 : "Homogenous, Growing Field" 
# ------------------------------------------------------------------------------
# ionization model: BSIHydrogenLike
flags[3]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=2;-DPARAM_IONIZATIONMODEL=BSIHydrogenLike"
# ionization model: ADK
flags[4]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=2;-DPARAM_IONIZATIONMODEL=ADK"
###

#####
# Test case 3 : "Spatial Gaussian"
# ------------------------------------------------------------------------------
# ionization model: BSIHydrogenLike
flags[5]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=3;-DPARAM_IONIZATIONMODEL=BSIHydrogenLike"
# ionization model: ADK
flags[6]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=None;-DPARAM_DIMENSION=DIM2;-DPARAM_TESTCASE=3;-DPARAM_IONIZATIONMODEL=ADK"
###

#####
# Test case 4 : "Plane Wave"
# ------------------------------------------------------------------------------
# ionization model: BSIHydrogenLike
flags[7]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=Vay;-DPARAM_DIMENSION=DIM2;-DENABLE_CURRENT=1;-DPARAM_TESTCASE=4;-DPARAM_IONIZATIONMODEL=BSIHydrogenLike"
# ionization model: ADK
flags[8]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=Vay;-DPARAM_DIMENSION=DIM2;-DENABLE_CURRENT=1;-DPARAM_TESTCASE=4;-DPARAM_IONIZATIONMODEL=ADK"
###

#####
# Test case 5 : "LWFA"
# ------------------------------------------------------------------------------
# ionization model: BSIHydrogenLike
flags[9]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=Vay;-DPARAM_DIMENSION=DIM2;-DENABLE_CURRENT=1;-DPARAM_TESTCASE=5;-DPARAM_IONIZATIONMODEL=BSIHydrogenLike"
# ionization model: ADK
flags[10]="-DCUDA_ARCH=sm_20 -DPARAM_OVERWRITES:LIST=-DPARAM_PARTICLEPUSHER=Vay;-DPARAM_DIMENSION=DIM2;-DENABLE_CURRENT=1;-DPARAM_TESTCASE=5;-DPARAM_IONIZATIONMODEL=ADK"
###

################################################################################
# execution

case "$1" in
    -l)  echo ${#flags[@]}
         ;;
    -ll) for f in "${flags[@]}"; do echo $f; done
         ;;
    *)   echo -n ${flags[$1]}
         ;;
esac
